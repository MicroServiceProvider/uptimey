
/* Project details */

(function() {
  var LOCATION, SUNRISE, SUNSET, animateElement, branchesObject, changeIcon, data, empty, isNumber, projectLink, settings;

  projectLink = 'https://github.com/stefanbc/uptimey';


  /* Set the global files */

  data = './lib/models/data.php';

  settings = './bin/js/settings.json';


  /* Set the global vars */

  LOCATION = '';

  SUNRISE = '';

  SUNSET = '';


  /* Animate element */

  animateElement = function(element) {
    $(element).addClass('pulse');
    return $(element).on('webkitAnimationEnd mozAnimationEnd MSAnimationEnd oanimationend animationend', function() {
      $(this).removeClass('pulse');
    });
  };


  /* Change button icon */

  changeIcon = function(element, removedClass, addedClass) {
    if (element === 'this') {
      return $(this).removeClass(removedClass).addClass(addedClass);
    } else {
      return $(element).removeClass(removedClass).addClass(addedClass);
    }
  };


  /* Check if variable is number */

  isNumber = function(obj) {
    return !isNaN(parseFloat(obj));
  };


  /* Check if variable is empty */

  empty = function(data) {
    var count, i;
    if (typeof data === 'number' || typeof data === 'boolean') {
      return false;
    }
    if (typeof data === 'undefined' || data === null) {
      return true;
    }
    if (typeof data.length !== 'undefined') {
      return data.length === 0;
    }
    count = 0;
    for (i in data) {
      if (data.hasOwnProperty(i)) {
        count++;
      }
    }
    return count === 0;
  };

  branchesObject = {
    branch_1: {
      path: 'M 264 103 L 264 66 Q 264 56 263.5 56 L 263.25 56 Q 263 56 263 46 L 263 12',
      end: '263,9',
      cellSize: 'large'
    },
    branch_2: {
      path: 'M 264 262 L 264 296 Q 264 306 263.5 306 L 263.25 306 Q 263 306 263 316 L 263 346',
      end: '263,349',
      cellSize: 'medium'
    },
    branch_3: {
      path: 'M 326 183 L 516 183',
      end: '519,183',
      cellSize: 'medium'
    },
    branch_4: {
      path: 'M 201 183 L 12 183',
      end: '9,183',
      cellSize: 'medium'
    },
    branch_5: {
      path: 'M 326 143 L 326 99 Q 326 89 336 89 L 429 89 Q 439 89 449 89 L 476 89',
      end: '479,89',
      cellSize: 'small'
    },
    branch_6: {
      path: 'M 326 222 L 326 269 Q 326 279 336 279 L 476 279',
      end: '479,289',
      cellSize: 'small'
    },
    branch_7: {
      path: 'M 201 143 L 201 99 Q 201 89 191 89 L 52 89',
      end: '49,89',
      cellSize: 'small'
    },
    branch_8: {
      path: 'M 201 222 L 201 269 Q 201 289 191 289 L 52 289',
      end: '49,289',
      cellSize: 'small'
    }
  };

  (function($, _) {
    var $document, Layout;
    $document = $(document);
    Layout = {
      init: function() {
        this.$serverWrapper = $('#server');
        if (this.$serverWrapper.length > 0) {
          this.drawLayout();
        }
        return;
      },
      drawLayout: function() {
        var branches, end, icon, key, networkWrapper, obj, pos, server;
        server = SVG('server');
        networkWrapper = server.group();
        icon = networkWrapper.group().attr('id', 'icon-wrapper');
        branches = networkWrapper.group().attr('id', 'branches-wrapper');
        icon.path('M52, 55.5c0, 1.1-0.9, 2-2, 2H14c-1.1, 0-2-0.9-2-2V8.5c0-1.1, 0.9-2, 2-2H50c1.1, 0, 2, 0.9, 2, 2V55.5z');
        icon.line(12, 22.7, 52, 22.7);
        icon.line(12, 39.7, 50.8, 39.7);
        icon.circle(4).attr({
          cx: 44,
          cy: 13
        });
        icon.circle(4).attr({
          cx: 44,
          cy: 32
        });
        icon.circle(4).attr({
          cx: 44,
          cy: 49
        });
        icon.line(19.3, 13.5, 37.3, 13.5);
        icon.line(19.3, 32.5, 37.3, 32.5);
        icon.line(19.3, 49.5, 37.3, 49.5);
        for (key in branchesObject) {
          if (!branchesObject.hasOwnProperty(key)) {
            continue;
          }
          obj = branchesObject[key];
          pos = obj['end'].split(',');
          branches.path(obj['path']).attr('class', 'serverBranch');
          end = branches.ellipse(3, 3).attr({
            cx: pos[0],
            cy: pos[1]
          });
          this.drawCell(end.bbox(), '', obj['cellSize']);
        }
      },
      drawCell: function(pos, branch, cellSize) {
        var cellHeight, cellPosition, cellSpacer, cellWidth, containerHeight, containerWidth, sectionHeight, sectionWidth, x, y;
        x = pos.cx;
        y = pos.cy;
        containerHeight = this.$serverWrapper.height();
        containerWidth = this.$serverWrapper.width();
        cellSpacer = 20;
        switch (cellSize) {
          case 'small':
            cellWidth = 100;
            cellHeight = 45;
            break;
          case 'medium':
            cellWidth = 150;
            cellHeight = 68;
            break;
          case 'large':
            cellWidth = 200;
            cellHeight = 90;
        }
        sectionHeight = containerHeight / 5;
        sectionWidth = containerWidth / 3;
        if (y <= sectionHeight && x >= sectionWidth) {
          x = x - (cellWidth / 2);
          y = (y - cellHeight) - cellSpacer;
          cellPosition = 'top';
        } else if (x >= y) {
          x = x + cellSpacer;
          y = y - (cellHeight / 2);
          cellPosition = 'right';
        } else if (y >= sectionHeight && x >= sectionWidth) {
          x = x - (cellWidth / 2);
          y = y + cellSpacer;
          cellPosition = 'bottom';
        } else if (x <= y) {
          x = (x - cellWidth) - cellSpacer;
          y = y - (cellHeight / 2);
          cellPosition = 'left';
        }
        $("<div class='cell " + cellPosition + " " + cellSize + "'>INFORMATION</div>").css({
          top: y + "px",
          left: x + "px"
        }).appendTo(this.$serverWrapper);
      }
    };
    $document.ready(function() {
      if ($('#default-layout').length > 0) {
        Layout.init();
      }
    });
  })(window.jQuery, window._);

}).call(this);
